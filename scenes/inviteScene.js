const Scene = require('node-vk-bot-api/lib/scene')
const Markup = require('node-vk-bot-api/lib/markup')
const { Coach, Padavan, RegData } = require('../mongoModels')
const kbd = require('../keyboards')
const query = require('../query')
const api = require('node-vk-bot-api/lib/api')
const { newKeybord, fromBegin } = require('../functions')

const inviting = new Scene( // –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
   'accept_invite',
   async (ctx) => {
      if (!ctx.message.payload) {
         const data = await RegData.findOne({ w_code: ctx.message.text })
         const user = await api('users.get', {
            user_ids: ctx.message.from_id,
            access_token: process.env.VK_TOKEN,
         }).then((data) => data.response[0])
         ctx.session.data = data
         ctx.session.user = user
      }
      const msg = ctx.message.payload
         ? `–•–æ—Ä–æ—à–æ, —Ç—ã –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –≤—ã–±–æ—Ä`
         : `–î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥, –º—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è –Ω–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ-–æ—á–Ω–æ–º –ë–∞–∑–æ–≤–æ–º –æ–±—É—á–µ–Ω–∏–∏ –ø–æ –ü—Ä–æ–¥–∞–∂–∞–º.\n–ú–µ–Ω—è –∑–æ–≤—É—Ç –†–æ–±–±–∏. –Ø –±—É–¥—É —Ç–µ–±—è —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –≤—Å–µ–≥–æ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø–æ –æ–±—É—á–µ–Ω–∏—é.\n\n–£—Ç–æ—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫—Ç–æ —Ç–≤–æ–π —Ç—Ä–µ–Ω–µ—Ä?`

      if (ctx.session.data) {
         ctx.scene.next()
         const [buttons] = await query.selectAll(Coach)
         ctx.reply(
            msg,
            null,
            Markup.keyboard(newKeybord(buttons, '–ù–µ –∑–Ω–∞—é –∫—Ç–æ –º–æ–π —Ç—Ä–µ–Ω–µ—Ä...', 'who')).oneTime()
         )
      } else {
         ctx.reply(`–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –Ω–∏ –∫ –æ–¥–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ`)
      }
   },
   async (ctx) => {
      if (ctx.message.payload) {
         ctx.scene.next()
         let payload = JSON.parse(ctx.message.payload)
         if (payload.value == 'who') {
            ctx.reply('–ù–µ –∑–Ω–∞—é')
            ctx.scene.enter('accept_invite')
         } else {
            ctx.session.coachId = payload
            const coach = await Coach.findOne({ coach_id: payload })
            ctx.reply(`–¢–µ–ø–µ—Ä—å ${coach.full_name} —Ç–≤–æ–π —Ç—Ä–µ–Ω–µ—Ä\n–í—ã —É–≤–µ—Ä–µ–Ω—ã?`, null, kbd.confirmBtns)
         }
      } else {
         fromBegin(ctx, 'accept_invite')
      }
   },
   async (ctx) => {
      if (ctx.message.payload) {
         ctx.scene.next()
         let payload = JSON.parse(ctx.message.payload)
         const groupId = ctx.groupId
         const msgId = ctx.message.id
         const userID = ctx.message.from_id
         switch (payload.value) {
            case 'yes':
               await api('messages.send', {
                  message: `–£ —Ç–µ–±—è –≤ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ\n–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∏–∞–ª–æ–≥: https://vk.com/gim${groupId}?sel=${userID}`,
                  user_id: userID,
                  forward: {
                     peer_id: userID,
                     message_ids: [msgId],
                  },
                  access_token: process.env.VK_TOKEN,
                  random_id: 0,
               })
               await query.add(
                  'padavans',
                  ctx.session.user.id,
                  ctx.session.user.last_name + ' ' + ctx.session.user.first_name,
                  ctx.session.data.ren_login,
                  ctx.session.data.ren_pass,
                  ctx.session.data.w_code,
                  ctx.session.coachId
               )
               ctx.reply(
                  '–û—Ç–ª–∏—á–Ω–æ!\n\n–í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ç–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –ø—Ä–æ–ª–µ—Ç–µ—Ç—å –Ω–∞ —Ä–∞–∫–µ—Ç–µ –ø–ª–∞–Ω–µ—Ç—ã:\n\n–ø–ª–∞–Ω–µ—Ç–∞ - –ü–†–û–î–£–ö–¢–´. –ó–¥–µ—Å—å —Ç—ã —É–∑–Ω–∞–µ—à—å —Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–¥–∞—é—Ç—Å—è –≤ –Ω–∞—à–µ–º –∫–æ—Å–º–∏—á–µ—Å–∫–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –∏ –∏—Ö –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.\n\n–ø–ª–∞–Ω–µ—Ç–∞ - –ö–û–ú–ú–£–ù–ò–ö–ê–¢–ò–í. –ù–∞ —ç—Ç–æ–π –≥–æ—Ä—è—á–µ–π –ø–ª–∞–Ω–µ—Ç–µ —Ç–µ–±—è –∂–¥—É—Ç –æ—Å–Ω–æ–≤—ã –æ–±—â–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∏ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –Ω–∞–∏–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏.\n\n–ø–ª–∞–Ω–µ—Ç–∞ - –ü–†–û–ì–†–ê–ú–ú–´. –í –≥–æ—Å—Ç—è—Ö —É —ç—Ç–æ–π –ø–ª–∞–Ω–µ—Ç—ã —Ç—ã —É–∑–Ω–∞–µ—à—å –Ω–∞ –∫–∞–∫—É—é –∫–Ω–æ–ø–∫—É –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ –±–∞–Ω–∫–∞ –∏ –∑–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –≤ –æ—Ñ–∏—Å.\n\n–ö–∞–∫ —Ç–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π?\n–ì–æ—Ç–æ–≤ –∫ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º?',
                  null,
                  kbd.confirmBtns
               )
               break
            case 'no':
               console.log('1')
               ctx.scene.enter('accept_invite')
               break
         }
      } else {
         fromBegin(ctx, 'accept_invite')
      }
   },
   async (ctx) => {
      if (ctx.message.payload) {
         let payload = JSON.parse(ctx.message.payload)
         switch (payload.value) {
            case 'yes':
               // await Padavan.deleteOne({ ren_login: ctx.session.ren_login })
               ctx.scene.leave()
               await ctx.reply('–°–µ–π—á–∞—Å —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –¥–ª—è —Ç–µ–±—è —É—á—ë—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –∏ –¥–æ–±–∞–≤–ª—é –≤ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É')

               setTimeout(async () => {
                  await ctx.reply(
                     `========================\r\n–õ–û–ì–ò–ù: ${ctx.session.data.ren_login}\r\n–ü–ê–†–û–õ–¨: ${ctx.session.data.ren_pass}\r\n========================\n\n\n`
                  )
                  await ctx.reply('http://webtutor.rencredit.ru')
               }, 3000)
               setTimeout(async () => {
                  await ctx.reply(
                     '–ï—Å–ª–∏ —á—Ç–æ, —è –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º –∏ –∂–¥—É —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã ü§ñ',
                     null,
                     kbd.padavanMainMenu
                  )
               }, 5000)
               break
            case 'no':
               await Padavan.deleteOne({ vk_id: ctx.session.user.id })
               ctx.scene.enter('accept_invite')
               break
         }
      } else {
         await Padavan.deleteOne({ vk_id: ctx.session.user.id })
         fromBegin(ctx, 'accept_invite')
      }
   }
)

const question = new Scene('quest', async (ctx) => {
   // –≤–æ–ø—Ä–æ—Å —Ç—Ä–µ–Ω–µ—Ä—É
   if (ctx.message.payload) {
      const pad = await Padavan.findOne({ vk_id: ctx.message.from_id })
      const coach = await Coach.findOne({ coach_id: pad.coach_id })
      console.log(coach)
      // ctx.session.user = pad
   }
   const msg = ctx.message.payload
      ? `–•–æ—Ä–æ—à–æ, —Ç—ã –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –≤—ã–±–æ—Ä`
      : `–î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥, –º—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è –Ω–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ-–æ—á–Ω–æ–º –ë–∞–∑–æ–≤–æ–º –æ–±—É—á–µ–Ω–∏–∏ –ø–æ –ü—Ä–æ–¥–∞–∂–∞–º.\n–ú–µ–Ω—è –∑–æ–≤—É—Ç –†–æ–±–±–∏. –Ø –±—É–¥—É —Ç–µ–±—è —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –≤—Å–µ–≥–æ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø–æ –æ–±—É—á–µ–Ω–∏—é.\n\n–£—Ç–æ—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫—Ç–æ —Ç–≤–æ–π —Ç—Ä–µ–Ω–µ—Ä?`

   if (ctx.session.data) {
      ctx.scene.next()
      const [buttons] = await query.selectAll(Coach)
      ctx.reply(
         msg,
         null,
         Markup.keyboard(newKeybord(buttons, '–ù–µ –∑–Ω–∞—é –∫—Ç–æ –º–æ–π —Ç—Ä–µ–Ω–µ—Ä...', 'who')).oneTime()
      )
   } else {
      ctx.reply(`–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –Ω–∏ –∫ –æ–¥–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ`)
   }
})

module.exports = {
   inviteCodeScene: inviting,
   questionScene: question,
}
